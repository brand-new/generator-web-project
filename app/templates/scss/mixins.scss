/*
 *	CSS Shapes by Ilanbiala - https://github.com/ilanbiala/CSS-Shapes
 */
@mixin rectangle($width, $height, $color) {
	width: $width;
	height: $height;
	background: $color;
}

// slightly changed
@mixin parallelogram($width, $height, $skew, $color) {
	@include rectangle($width, $height, $color);
	transform: skew($skew);
}

@mixin square($size, $color) {
	@include rectangle($size, $size, $color);
}

@mixin circle($size, $color) {
	@include square($size, $color);
	border-radius: $size/2;
}

@mixin oval($width, $height, $color) {
	width: $width;
	height: $height;
	border-radius: #{$width}/#{$height};
	background: $color;
}

@mixin eq-triangle($direction, $size, $color) {
	width: 0;
	height: 0;

	@if $direction == 'up' {
		border-right: $size solid transparent;
		border-bottom: $size * 1.732 solid $color;
		border-left: $size solid transparent;
	} @else if $direction == 'down' {
		border-top: $size * 1.732 solid $color;
		border-right: $size solid transparent;
		border-left: $size solid transparent;
	} @else if $direction == 'left' {
		border-top: $size solid transparent;
		border-right: $size * 1.732 solid $color;
		border-bottom: $size solid transparent;
	} @else if $direction == 'right' {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size * 1.732 solid $color;
	}
}

@mixin corner-triangle($corner, $size, $color) {
	width: 0;
	height: 0;

	@if $corner == 'top-left' {
		border-top: $size solid $color;
		border-right: $size solid transparent;
	} @else if $corner == 'top-right' {
		border-top: $size solid $color;
		border-left: $size solid transparent;
	} @else if $corner == 'bottom-left' {
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	} @else if $corner == 'bottom-right' {
		border-bottom: $size solid $color;
		border-left: $size solid transparent;
	}
}

/*
 *	Custom triangle mixin for pseudo elements
 */
@mixin triangle($oposite-direction, $size, $weight, $color) {
	content: "";
	display: block;
	width: 0;
	height: 0;
	border: $size solid;
	border-#{$oposite-direction}: $weight solid;
	border-color: transparent;
	border-#{$oposite-direction}-color: $color;
}

/*
 *	Easy input placeholders styling
 */
@mixin placeholder {
	::-webkit-input-placeholder { @content; }
	:-moz-placeholder { @content; }
	::-moz-placeholder { @content; }
	:-ms-input-placeholder { @content; }
}

/*
 *	Breakpoint mixin for handeling @media (inspired by http://codepen.io/chriscoyier/blog/codepens-css)
 */
@mixin bp($breakpoint) {
	@media #{$breakpoint} { @content; }
}

/*
 * Coverer by Chris Coyier (http://codepen.io/chriscoyier/blog/some-mini-sass-mixins-i-like)
 */
@mixin coverer {
	position: absolute;
	top: 0;
	left: 0;
	display: block;
	width: 100%;
	height: 100%;
}